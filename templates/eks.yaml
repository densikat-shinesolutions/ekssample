---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Cluster'

Parameters:
    vpcId:
        Type: AWS::EC2::VPC::Id
    privSubA:
        Type: String
    privSubB:
        Type: String
    pubSubA:
        Type: String
    pubSubB:
        Type: String
    masterRoleArn:
        Type: String
    workerGroupRole:
        Type: String
    clusterName:
        Type: String
    workerNodeNumber:
        Type: String
    workerNodeType:
        Type: String
    amiId:
        Type: String
    keypair:
        Type: String

Resources:
    ControlPlane:
      Type: AWS::EKS::Cluster
      Properties:
        Name: !Ref clusterName
        Version: "1.12"
        RoleArn: !Ref masterRoleArn
        ResourcesVpcConfig:
          SecurityGroupIds:
            - !Ref ControlPlaneSecurityGroup
          SubnetIds:
            - !Ref privSubA
            - !Ref privSubB
            - !Ref pubSubA
            - !Ref pubSubB

    ControlPlaneSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for the elastic network interfaces between the control plane and the worker nodes
        VpcId: !Ref vpcId
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-ControlPlaneSecurityGroup"
        
    ControlPlaneIngressFromWorkerNodesHttps:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Allow incoming HTTPS traffic (TCP/443) from worker nodes (for API server)
        GroupId: !Ref ControlPlaneSecurityGroup
        SourceSecurityGroupId: !Ref WorkerNodesSecurityGroup
        IpProtocol: tcp
        ToPort: 443
        FromPort: 443

    ControlPlaneEgressToWorkerNodesKubelet:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        Description: Allow outgoing kubelet traffic to worker nodes
        GroupId: !Ref ControlPlaneSecurityGroup
        DestinationSecurityGroupId: !Ref WorkerNodesSecurityGroup
        IpProtocol: tcp
        FromPort: 1025
        ToPort: 65535

    ControlPlaneEgressToWorkerNodesHttps:
      Type: AWS::EC2::SecurityGroupEgress
      Properties:
        Description: Allow outgoing HTTPS traffic (TCP/442) to worker nodes (for pods running extension API servers)
        GroupId: !Ref ControlPlaneSecurityGroup
        DestinationSecurityGroupId: !Ref WorkerNodesSecurityGroup
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
    
    WorkerNodesSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for all the worker nodes
        VpcId: !Ref vpcId
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-WorkerNodesSecurityGroup"
          - Key: !Sub "kubernetes.io/cluster/${ControlPlane}"
            Value: "owned"

    WorkerNodesIngressFromWorkerNodes:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Allow all incoming traffic from other worker nodes
        GroupId: !Ref WorkerNodesSecurityGroup
        SourceSecurityGroupId: !Ref WorkerNodesSecurityGroup
        IpProtocol: "-1"

    WorkerNodesIngressFromControlPlaneKubelet:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Allow incoming kubelet traffic from control plane 
        GroupId: !Ref WorkerNodesSecurityGroup
        SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
        IpProtocol: tcp
        FromPort: 1025
        ToPort: 65535

    WorkerNodesIngressFromControlPlaneHttps:
      Type: AWS::EC2::SecurityGroupIngress
      Properties:
        Description: Allow incoming HTTPS traffic (TCP/443) from control plane (for pods running extension API servers)
        GroupId: !Ref WorkerNodesSecurityGroup
        SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443
    
    WorkerNodesAutoScalingGroup:
      Type: AWS::AutoScaling::AutoScalingGroup
      UpdatePolicy:
        AutoScalingRollingUpdate:
          MinInstancesInService: 1
          MaxBatchSize: 1
      Properties:
        LaunchConfigurationName: !Ref WorkerNodesLaunchConfiguration
        MinSize: !Ref workerNodeNumber
        MaxSize: !Ref workerNodeNumber
        VPCZoneIdentifier:
          - !Ref privSubA
          - !Ref privSubB
        Tags:
          - Key: Name
            Value: !Sub "${AWS::StackName}-WorkerNodesAutoScalingGroup"
            PropagateAtLaunch: true
          # Without this tag, worker nodes are unable to join the cluster:
          - Key: !Sub "kubernetes.io/cluster/${ControlPlane}"
            Value: "owned"
            PropagateAtLaunch: true

    WorkerNodesLaunchConfiguration:
      Type: AWS::AutoScaling::LaunchConfiguration
      # Wait until cluster is ready before launching worker nodes
      DependsOn: ControlPlane
      Properties:
        AssociatePublicIpAddress: true
        IamInstanceProfile: !Ref WorkerNodesInstanceProfile
        ImageId: !Ref amiId
        InstanceType: !Ref workerNodeType
        KeyName: !Ref keypair
        SecurityGroups:
          - !Ref WorkerNodesSecurityGroup
        UserData:
          Fn::Base64: !Sub |
              #!/bin/bash
              set -o xtrace
              /etc/eks/bootstrap.sh ${ControlPlane}
              /opt/aws/bin/cfn-signal \
                              --exit-code $? \
                              --stack  ${AWS::StackName} \
                              --resource WorkerNodesAutoScalingGroup  \
                              --region ${AWS::Region}

    WorkerNodesInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Roles:
          - !Ref workerGroupRole
