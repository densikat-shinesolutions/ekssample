AWSTemplateFormatVersion: '2010-09-09'
Parameters:
    VPCName:
        Description: Name for VPC
        Type: String
    CidrBlock:
        Description: Main VPC Cidr Block
        Type: String
    PublicA:
        Description: Public subnet A
        Type: String
    PublicB:
        Description: Public subnet B
        Type: String
    PrivateA:
        Description: Private subnet A
        Type: String
    PrivateB:
        Description: Private subnet B
        Type: String
Resources:
    centralVPC:
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref CidrBlock
            EnableDnsSupport: 'true'
            EnableDnsHostnames: 'true'
            Tags:
            - Key: Name
              Value: !Ref VPCName
    internetGateway:
        Type: 'AWS::EC2::InternetGateway'
        DependsOn: centralVPC
    vpcGatewayAttach:
        Type: 'AWS::EC2::VPCGatewayAttachment'
        DependsOn: internetGateway
        Properties:
            VpcId: !Ref centralVPC
            InternetGatewayId: !Ref internetGateway
    natGatewayAIP:
        Type: 'AWS::EC2::EIP'
        DependsOn: centralVPC
        Properties:
            Domain: vpc
    natGatewayBIP:
        Type: 'AWS::EC2::EIP'
        DependsOn: centralVPC
        Properties:
            Domain: vpc
    natGatewayA:
        Type: 'AWS::EC2::NatGateway'
        DependsOn: natGatewayAIP
        Properties:
            AllocationId: !GetAtt natGatewayAIP.AllocationId
            SubnetId: !Ref pubSubA
    natGatewayB:
        Type: 'AWS::EC2::NatGateway'
        DependsOn: natGatewayBIP
        Properties:
            AllocationId: !GetAtt natGatewayBIP.AllocationId
            SubnetId: !Ref pubSubB
    pubSubA:
        Type: 'AWS::EC2::Subnet'
        DependsOn: centralVPC
        Properties:
            VpcId:
                Ref: centralVPC
            CidrBlock: !Ref PublicA
            AvailabilityZone: !Select [0, !GetAZs '']
            Tags:
            - Key: Name
              Value: PublicA
            - Key: kubernetes.io/role/alb-ingress
              Value: ''
            - Key: kubernetes.io/role/elb
              Value: ''
    pubSubB:
        Type: 'AWS::EC2::Subnet'
        DependsOn: centralVPC
        Properties:
            VpcId:
                Ref: centralVPC
            CidrBlock: !Ref PublicB
            AvailabilityZone: !Select [1, !GetAZs '']
            Tags:
            - Key: Name
              Value: PublicB
            - Key: kubernetes.io/role/alb-ingress
              Value: ''
            - Key: kubernetes.io/role/elb
              Value: ''
    privSubA:
        Type: 'AWS::EC2::Subnet'
        DependsOn: centralVPC
        Properties:
            VpcId:
                Ref: centralVPC
            CidrBlock: !Ref PrivateA
            AvailabilityZone: !Select [0, !GetAZs '']
            Tags:
            - Key: Name
              Value: PrivateA
            - Key: kubernetes.io/role/alb-ingress
              Value: ''
            - Key: kubernetes.io/role/internal-elb
              Value: ''
    privSubB:
        Type: 'AWS::EC2::Subnet'
        DependsOn: centralVPC
        Properties:
            VpcId:
                Ref: centralVPC
            CidrBlock: !Ref PrivateB
            AvailabilityZone: !Select [1, !GetAZs '']
            Tags:
            - Key: Name
              Value: PrivateB
            - Key: kubernetes.io/role/alb-ingress
              Value: ''
            - Key: kubernetes.io/role/internal-elb
              Value: ''
    pubRouteTableA:
        Type: 'AWS::EC2::RouteTable'
        DependsOn: centralVPC
        Properties:
            VpcId: !Ref centralVPC
    pubRouteTableB:
        Type: 'AWS::EC2::RouteTable'
        DependsOn: centralVPC
        Properties:
            VpcId: !Ref centralVPC
    privRouteTableA:
        Type: 'AWS::EC2::RouteTable'
        DependsOn: centralVPC
        Properties:
            VpcId: !Ref centralVPC
    privRouteTableB:
        Type: 'AWS::EC2::RouteTable'
        DependsOn: centralVPC
        Properties:
            VpcId: !Ref centralVPC
    pubRouteA:
        Type: 'AWS::EC2::Route'
        DependsOn: vpcGatewayAttach
        Properties:
            RouteTableId: !Ref pubRouteTableA
            DestinationCidrBlock: '0.0.0.0/0'
            GatewayId: !Ref internetGateway
    pubRouteB:
        Type: 'AWS::EC2::Route'
        DependsOn: vpcGatewayAttach
        Properties:
            RouteTableId: !Ref pubRouteTableB
            DestinationCidrBlock: '0.0.0.0/0'
            GatewayId: !Ref internetGateway
    privRouteA:
        Type: 'AWS::EC2::Route'
        DependsOn: natGatewayA
        Properties:
            RouteTableId: !Ref privRouteTableA
            DestinationCidrBlock: '0.0.0.0/0'
            NatGatewayId: !Ref natGatewayA
    privRouteB:
        Type: 'AWS::EC2::Route'
        DependsOn: natGatewayB
        Properties:
            RouteTableId: !Ref privRouteTableB
            DestinationCidrBlock: '0.0.0.0/0'
            NatGatewayId: !Ref natGatewayB
    pubRouteAssociateA:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        DependsOn: pubRouteTableA
        Properties:
            SubnetId: !Ref pubSubA
            RouteTableId: !Ref pubRouteTableA
    pubRouteAssociateB:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        DependsOn: pubRouteTableB
        Properties:
            SubnetId: !Ref pubSubB
            RouteTableId: !Ref pubRouteTableB
    privRouteAssociateA:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        DependsOn: privRouteTableA
        Properties:
            SubnetId: !Ref privSubA
            RouteTableId: !Ref privRouteTableA
    privRouteAssociateB:
        Type: 'AWS::EC2::SubnetRouteTableAssociation'
        DependsOn: privRouteTableB
        Properties:
            SubnetId: !Ref privSubB
            RouteTableId: !Ref privRouteTableB
Outputs:
    VPCid:
        Description: 'id of central ad vpc'
        Value: !Ref centralVPC
        Export:
            Name: !Sub '${AWS::StackName}-VPCId'
    VPCCidr:
        Description: 'cidr for vpc'
        Value: !Ref CidrBlock
        Export:
            Name: !Sub '${AWS::StackName}-VPCCidr'
    pubSubA:
        Description: 'id of pub sub A'
        Value: !Ref pubSubA
        Export:
            Name: !Sub '${AWS::StackName}-pubSubA'
    pubSubB:
        Description: 'id of pub sub B'
        Value: !Ref pubSubB
        Export:
            Name: !Sub '${AWS::StackName}-pubSubB'
    privSubA:
        Description: 'id of priv sub A'
        Value: !Ref privSubA
        Export:
            Name: !Sub '${AWS::StackName}-privSubA'
    privSubB:
        Description: 'id of priv sub B'
        Value: !Ref privSubB
        Export:
            Name: !Sub '${AWS::StackName}-privSubB'
    privSubACidr:
        Description: 'cidr of private subnet a'
        Value: !Ref PrivateA
        Export:
            Name: !Sub '${AWS::StackName}-privSubACidr'
    privSubBCidr:
        Description: 'cidr of private subnet b'
        Value: !Ref PrivateB
        Export:
            Name: !Sub '${AWS::StackName}-privSubBCidr'
    pubSubACidr:
        Description: 'cidr of public subnet a'
        Value: !Ref PublicA
        Export:
            Name: !Sub '${AWS::StackName}-pubSubACidr'
    pubSubBCidr:
        Description: 'cidr of public subnet b'
        Value: !Ref PublicB
        Export:
            Name: !Sub '${AWS::StackName}-pubSubBCidr'
    privRouteA:
        Description: 'Route for Private subnet A'
        Value: !Ref privRouteTableA
        Export:
            Name: !Sub '${AWS::StackName}-privRouteA'
    privRouteB:
        Description: 'Route for Private subnet B'
        Value: !Ref privRouteTableB
        Export:
            Name: !Sub '${AWS::StackName}-privRouteB'

        

